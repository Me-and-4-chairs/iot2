import base64
import cv2
import numpy as np
import paho.mqtt.client as mqtt
import time
import torch
from flask import Flask, render_template, Response
from datetime import datetime
from ultralytics import YOLO

# Khá»Ÿi táº¡o Flask Web Server
app = Flask(__name__)

# ðŸ”§ Cáº¥u hÃ¬nh MQTT
MQTT_BROKER = "192.168.1.13"
MQTT_PORT = 1883
MQTT_TOPIC = "img"

# Load mÃ´ hÃ¬nh YOLOv8 nháº­n diá»‡n Ä‘Ã¡m chÃ¡y
model = YOLO(r'C:\Users\ACER\PycharmProjects\fire\best1.pt')
model.eval()

# Biáº¿n toÃ n cá»¥c lÆ°u áº£nh tá»« MQTT
image_data = {}
total_parts = None
latest_image = None

# HÃ m tá»± Ä‘á»™ng sá»­a lá»—i thiáº¿u padding Base64
def fix_base64_padding(base64_string):
    missing_padding = len(base64_string) % 4
    if missing_padding:
        base64_string += "=" * (4 - missing_padding)
    return base64_string

# HÃ m nháº­n diá»‡n Ä‘Ã¡m chÃ¡y báº±ng YOLOv8
def detect_fire(image):
    global latest_image
    results = model(image)  # Nháº­n diá»‡n áº£nh

    # Váº½ bounding box lÃªn áº£nh
    for result in results:
        image_cv = result.plot()

    # Kiá»ƒm tra náº¿u cÃ³ phÃ¡t hiá»‡n Ä‘Ã¡m chÃ¡y
    fire_detected = any(cls == 0 for _, _, _, _, _, cls in result.boxes.data.tolist())

    # Cáº­p nháº­t biáº¿n latest_image Ä‘á»ƒ hiá»ƒn thá»‹ trÃªn web
    _, buffer = cv2.imencode('.jpg', image_cv)
    latest_image = buffer.tobytes()

    return fire_detected

# Xá»­ lÃ½ dá»¯ liá»‡u MQTT nháº­n Ä‘Æ°á»£c
def on_message(client, userdata, msg):
    global image_data, latest_image, total_parts

    message = msg.payload.decode()

    if message == "end":
        if total_parts is not None and len(image_data) == total_parts:
            try:
                # GhÃ©p cÃ¡c pháº§n áº£nh láº¡i
                full_image_data = "".join(image_data[i] for i in sorted(image_data.keys()))
                full_image_data = fix_base64_padding(full_image_data)

                # Giáº£i mÃ£ áº£nh
                image_bytes = base64.b64decode(full_image_data)
                np_arr = np.frombuffer(image_bytes, np.uint8)
                current_image = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)

                if current_image is not None:
                    print(" ðŸ”¥ áº¢nh nháº­n thÃ nh cÃ´ng! Cháº¡y nháº­n diá»‡n Ä‘Ã¡m chÃ¡y...")

                    # Nháº­n diá»‡n Ä‘Ã¡m chÃ¡y
                    detect_fire(current_image)

            except Exception as e:
                print(f" Lá»—i khi xá»­ lÃ½ áº£nh: {e}")

        # XÃ³a bá»™ nhá»› sau khi xá»­ lÃ½ xong
        image_data.clear()
        total_parts = None

    else:
        try:
            # GhÃ©p tá»«ng pháº§n áº£nh
            index, part = message.split(":", 1)
            part_index, total = map(int, index.split("/"))
            total_parts = total
            image_data[part_index] = part

        except Exception as e:
            print(f" Lá»—i khi xá»­ lÃ½ pháº§n áº£nh: {e}")

# Káº¿t ná»‘i MQTT
client = mqtt.Client()
client.on_message = on_message
client.connect(MQTT_BROKER, MQTT_PORT, 60)
client.subscribe(MQTT_TOPIC)
client.loop_start()

# Route Flask hiá»ƒn thá»‹ giao diá»‡n chÃ­nh
@app.route('/')
def index():
    return render_template('index.html')

# Route Flask hiá»ƒn thá»‹ áº£nh nháº­n diá»‡n
def generate():
    global latest_image
    while True:
        if latest_image:
            yield (b'--frame\r\n'
                   b'Content-Type: image/jpeg\r\n\r\n' + latest_image + b'\r\n')
        time.sleep(0.1)

@app.route('/esp_feed')
def esp_feed():
    return Response(generate(), mimetype='multipart/x-mixed-replace; boundary=frame')

# Cháº¡y Flask Server
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True, threaded=True)
